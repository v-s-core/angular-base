{"ast":null,"code":"import _asyncToGenerator from \"D:/web app/angular-base/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport axios from 'axios';\nimport { environment } from '@env/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./store.service\";\nimport * as i2 from \"@blocks/toast/toast.manager\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@ngx-translate/core\";\nexport class AppService {\n  constructor(storeService, toastManager, router, translateService) {\n    this.storeService = storeService;\n    this.toastManager = toastManager;\n    this.router = router;\n    this.translateService = translateService;\n    // NOTE Default configuration\n    this.default = {\n      withCredentials: true,\n      timeout: 990000,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    };\n    // NOTE Instances\n    this.api = axios.create({\n      baseURL: environment.apiBaseUrl,\n      ...this.default\n    });\n    // NOTE Controller\n    this.controller = new AbortController();\n    this.initRequestInterceptor(this.api);\n    this.initResponseInterceptor(this.api);\n    this.initAuthHeader();\n  }\n  // ----------------------------------------------------------------------------------------------\n  // SECTION Methods ------------------------------------------------------------------------------\n  // ----------------------------------------------------------------------------------------------\n  authenticate(email, password) {\n    return _asyncToGenerator(function* () {\n      return Promise.resolve(true);\n      // StorageHelper.removeToken();\n      // const url      = Endpoint.AUTHENTICATE;\n      // const { data } = await this.api.post(url, { email, password });\n      // if (!data)\n      //   return false;\n      // const authResponse = new AuthResponse(data);\n      // StorageHelper.setToken(authResponse);\n      // this.initAuthHeader();\n      // return true;\n    })();\n  }\n  forgotPassword(email) {\n    return _asyncToGenerator(function* () {\n      return Promise.resolve(true);\n      // const url      = Endpoint.FORGOT_PASSWORD;\n      // const { data } = await this.api.post(url, { email });\n      // return !!data;\n    })();\n  }\n  validateAccount(token, password) {\n    return _asyncToGenerator(function* () {\n      return Promise.resolve(true);\n      // const url      = Endpoint.VALIDATE_ACCOUNT;\n      // const { data } = await this.api.post(url, { token, password });\n      // return !!data;\n    })();\n  }\n  // public async getLastLines(siteId : string) : Promise<Line[]>\n  // {\n  //   const url      = StringHelper.interpolate(Endpoint.GET_LAST_LINES, [ siteId ]);\n  //   const { data } = await this.api.get(url);\n  //   if (!data)\n  //     return [];\n  //   return ArrayTyper.asArray(Line, data);\n  // }\n  // !SECTION Methods\n  // ----------------------------------------------------------------------------------------------\n  // SECTION Helpers ------------------------------------------------------------------------------\n  // ----------------------------------------------------------------------------------------------\n  initAuthHeader() {\n    // const token = StorageHelper.getToken();\n    // if (!token)\n    //   return;\n    // this.api.defaults.headers.common['Authorization'] = `Bearer ${token.jwtToken}`;\n    // this.api.defaults.headers.common['Token']         = token.jwtToken;\n  }\n  initRequestInterceptor(instance) {\n    instance.interceptors.request.use(config => {\n      console.log('interceptors.request.config', config);\n      this.storeService.isLoading.set(true);\n      return config;\n    }, error => {\n      console.log('interceptors.request.error', error);\n      this.storeService.isLoading.set(false);\n      this.toastManager.quickShow(error);\n      return Promise.reject(error);\n    });\n  }\n  initResponseInterceptor(instance) {\n    var _this = this;\n    instance.interceptors.response.use(response => {\n      console.log('interceptors.response.response', response);\n      this.storeService.isLoading.set(false);\n      return response;\n    }, /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (error) {\n        console.log('interceptors.response.error', error);\n        _this.storeService.isLoading.set(false);\n        // NOTE Prevent request canceled error\n        if (error.code === 'ERR_CANCELED') return Promise.resolve(error);\n        _this.toastManager.quickShow(error.message);\n        return Promise.reject(error);\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n  static #_ = this.ɵfac = function AppService_Factory(t) {\n    return new (t || AppService)(i0.ɵɵinject(i1.StoreService), i0.ɵɵinject(i2.ToastManager), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.TranslateService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AppService,\n    factory: AppService.ɵfac\n  });\n}","map":{"version":3,"names":["axios","environment","AppService","constructor","storeService","toastManager","router","translateService","default","withCredentials","timeout","headers","api","create","baseURL","apiBaseUrl","controller","AbortController","initRequestInterceptor","initResponseInterceptor","initAuthHeader","authenticate","email","password","_asyncToGenerator","Promise","resolve","forgotPassword","validateAccount","token","instance","interceptors","request","use","config","console","log","isLoading","set","error","quickShow","reject","_this","response","_ref","code","message","_x","apply","arguments","_","i0","ɵɵinject","i1","StoreService","i2","ToastManager","i3","Router","i4","TranslateService","_2","factory","ɵfac"],"sources":["D:\\web app\\angular-base\\src\\app\\shared\\services\\app.service.ts"],"sourcesContent":["// Angular modules\r\nimport { Injectable }               from '@angular/core';\r\nimport { Router }                   from '@angular/router';\r\n\r\n// External modules\r\nimport { ArrayTyper }               from '@caliatys/array-typer';\r\nimport { TranslateService }         from '@ngx-translate/core';\r\nimport axios                        from 'axios';\r\nimport { AxiosResponse }            from 'axios';\r\nimport { AxiosError }               from 'axios';\r\nimport { AxiosInstance }            from 'axios';\r\nimport { CreateAxiosDefaults }      from 'axios';\r\n\r\n// Internal modules\r\nimport { ToastManager }             from '@blocks/toast/toast.manager';\r\nimport { environment }              from '@env/environment';\r\n\r\n// Helpers\r\nimport { StorageHelper }            from '@helpers/storage.helper';\r\n\r\n// Enums\r\nimport { Endpoint }                 from '@enums/endpoint.enum';\r\n\r\n// Models\r\n\r\n// Services\r\nimport { StoreService }             from './store.service';\r\n\r\n@Injectable()\r\nexport class AppService\r\n{\r\n  // NOTE Default configuration\r\n  private default : CreateAxiosDefaults = {\r\n    withCredentials : true,\r\n    timeout : 990000,\r\n    headers : {\r\n      'Content-Type' : 'application/json',\r\n      'Accept'       : 'application/json',\r\n    },\r\n  };\r\n\r\n  // NOTE Instances\r\n  private api : AxiosInstance = axios.create({\r\n    baseURL : environment.apiBaseUrl,\r\n    ...this.default,\r\n  });\r\n\r\n  // NOTE Controller\r\n  private controller : AbortController = new AbortController();\r\n\r\n  constructor\r\n  (\r\n    private storeService     : StoreService,\r\n    private toastManager     : ToastManager,\r\n    private router           : Router,\r\n    private translateService : TranslateService,\r\n  )\r\n  {\r\n    this.initRequestInterceptor(this.api);\r\n    this.initResponseInterceptor(this.api);\r\n\r\n    this.initAuthHeader();\r\n  }\r\n\r\n  // ----------------------------------------------------------------------------------------------\r\n  // SECTION Methods ------------------------------------------------------------------------------\r\n  // ----------------------------------------------------------------------------------------------\r\n\r\n  public async authenticate(email : string, password : string) : Promise<boolean>\r\n  {\r\n    return Promise.resolve(true);\r\n\r\n    // StorageHelper.removeToken();\r\n\r\n    // const url      = Endpoint.AUTHENTICATE;\r\n    // const { data } = await this.api.post(url, { email, password });\r\n\r\n    // if (!data)\r\n    //   return false;\r\n\r\n    // const authResponse = new AuthResponse(data);\r\n    // StorageHelper.setToken(authResponse);\r\n    // this.initAuthHeader();\r\n    // return true;\r\n  }\r\n\r\n  public async forgotPassword(email : string) : Promise<boolean>\r\n  {\r\n    return Promise.resolve(true);\r\n\r\n    // const url      = Endpoint.FORGOT_PASSWORD;\r\n    // const { data } = await this.api.post(url, { email });\r\n\r\n    // return !!data;\r\n  }\r\n\r\n  public async validateAccount(token : string, password : string) : Promise<boolean>\r\n  {\r\n    return Promise.resolve(true);\r\n\r\n    // const url      = Endpoint.VALIDATE_ACCOUNT;\r\n    // const { data } = await this.api.post(url, { token, password });\r\n\r\n    // return !!data;\r\n  }\r\n\r\n  // public async getLastLines(siteId : string) : Promise<Line[]>\r\n  // {\r\n  //   const url      = StringHelper.interpolate(Endpoint.GET_LAST_LINES, [ siteId ]);\r\n  //   const { data } = await this.api.get(url);\r\n\r\n  //   if (!data)\r\n  //     return [];\r\n\r\n  //   return ArrayTyper.asArray(Line, data);\r\n  // }\r\n\r\n  // !SECTION Methods\r\n\r\n  // ----------------------------------------------------------------------------------------------\r\n  // SECTION Helpers ------------------------------------------------------------------------------\r\n  // ----------------------------------------------------------------------------------------------\r\n\r\n  private initAuthHeader() : void\r\n  {\r\n    // const token = StorageHelper.getToken();\r\n    // if (!token)\r\n    //   return;\r\n\r\n    // this.api.defaults.headers.common['Authorization'] = `Bearer ${token.jwtToken}`;\r\n    // this.api.defaults.headers.common['Token']         = token.jwtToken;\r\n  }\r\n\r\n  public initRequestInterceptor(instance : AxiosInstance) : void\r\n  {\r\n    instance.interceptors.request.use((config) =>\r\n    {\r\n      console.log('interceptors.request.config', config);\r\n      this.storeService.isLoading.set(true);\r\n\r\n      return config;\r\n    },\r\n    (error) =>\r\n    {\r\n      console.log('interceptors.request.error', error);\r\n      this.storeService.isLoading.set(false);\r\n\r\n      this.toastManager.quickShow(error);\r\n      return Promise.reject(error);\r\n    });\r\n  }\r\n\r\n  public initResponseInterceptor(instance : AxiosInstance) : void\r\n  {\r\n    instance.interceptors.response.use((response) =>\r\n    {\r\n      console.log('interceptors.response.response', response);\r\n      this.storeService.isLoading.set(false);\r\n\r\n      return response;\r\n    },\r\n    async (error : AxiosError) =>\r\n    {\r\n      console.log('interceptors.response.error', error);\r\n      this.storeService.isLoading.set(false);\r\n\r\n      // NOTE Prevent request canceled error\r\n      if (error.code === 'ERR_CANCELED')\r\n        return Promise.resolve(error);\r\n\r\n      this.toastManager.quickShow(error.message);\r\n      return Promise.reject(error);\r\n    });\r\n  }\r\n\r\n  // !SECTION Helpers\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}